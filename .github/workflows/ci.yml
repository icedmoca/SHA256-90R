name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  actions: write
  security-events: write

jobs:
  test-linux-x86:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc, clang]
        build-type: [Debug, Release]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build
    
    - name: Configure CMake
      run: |
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
          -DCMAKE_C_COMPILER=${{ matrix.compiler }} \
          -DENABLE_SIMD=ON \
          -DENABLE_SHA_NI=ON \
          -DSECURE_MODE=ON
    
    - name: Build
      run: cmake --build build
    
    - name: Test
      run: |
        cd build
        ctest --output-on-failure -j$(nproc)
    
    - name: Benchmark (short)
      if: matrix.build-type == 'Release'
      run: |
        cd build
        ./bench_simple | tee bench_results.txt
        
    - name: Upload benchmark results
      if: matrix.build-type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-${{ matrix.compiler }}-x86
        path: build/bench_results.txt

  test-linux-arm:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [aarch64, armv7]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
        platforms: arm64,arm
    
    - name: Run ARM tests
      uses: docker://multiarch/ubuntu-core:arm64-focal
      with:
        args: |
          bash -c "
            export DEBIAN_FRONTEND=noninteractive
            export TZ=UTC
            apt-get update && \
            apt-get install -y --no-install-recommends build-essential cmake && \
            cmake -B build -DENABLE_SIMD=ON -DENABLE_ARM_CRYPTO=ON && \
            cmake --build build && \
            cd build && ctest --output-on-failure
          "

  test-make:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build with Make
      run: |
        make clean
        make test
    
    - name: Run benchmarks
      run: |
        make bench-simple
        make timing-test
    
    - name: Run GPU timing tests
      if: runner.os == 'Linux' && env.CUDA == '1'
      run: |
        # Note: GPU timing tests require CUDA environment variable to be set
        # sha256_internal.h is used for internal timing analysis (not installed/exported)
        make timing-test-gpu
    
    - name: Test installation
      run: |
        make install PREFIX=./install_test
        test -f ./install_test/lib/libsha256_90r.a
        test -f ./install_test/include/sha256_90r/sha256_90r.h
        make uninstall PREFIX=./install_test

  security-analysis:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      security-events: write
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: c-cpp
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
    
    - name: Run timing tests
      run: |
        make timing-test
        # Check that all backends pass timing tests
        grep -q "SECURE" bin/timing_leak_test || exit 1
    
    - name: Run GPU timing tests
      if: runner.os == 'Linux' && env.CUDA == '1'
      run: |
        # Note: GPU timing tests require CUDA environment variable to be set
        # sha256_internal.h is used for internal timing analysis (not installed/exported)
        make timing-test-gpu

  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Check documentation
      run: |
        # Verify all docs exist
        test -f README.md
        test -f docs/SHA256-90R.md
        test -f docs/Performance_Analysis.md
        
        # Check for required sections
        grep -q "Installation" README.md
        grep -q "Performance" docs/SHA256-90R.md
        grep -q "Security" docs/SHA256-90R.md
